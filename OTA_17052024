/**
   httpUpdateSPIFFS.ino

    Created on: 05.12.2015

*/

#include <Arduino.h>
#include <WiFi.h>
#include <WiFiMulti.h>
#include <HTTPClient.h>
#include <HTTPUpdate.h>

#include "FS.h"
#include "SPIFFS.h"
#include "firmwareVersion.h"
#define FORMAT_SPIFFS_IF_FAILED true // fs initialisation flag

WiFiMulti WiFiMulti;
String firmwareVersionString = String(firmwareVersion);
String PrevVersion; // var to check firmware ver
char readString[10];

// spiff functions for read write to flash 
void listDir(fs::FS &fs, const char * dirname, uint8_t levels){
    Serial.printf("Listing directory: %s\r\n", dirname);

    File root = fs.open(dirname);
    if(!root){
        Serial.println("- failed to open directory");
        return;
    }
    if(!root.isDirectory()){
        Serial.println(" - not a directory");
        return;
    }

    File file = root.openNextFile();
    while(file){
        if(file.isDirectory()){
            Serial.print("  DIR : ");
            Serial.println(file.name());
            if(levels){
                listDir(fs, file.path(), levels -1);
            }
        } else {
            Serial.print("  FILE: ");
            Serial.print(file.name());
            Serial.print("\tSIZE: ");
            Serial.println(file.size());
        }
        file = root.openNextFile();
    }
}


void readFile(fs::FS &fs, const char * path){
    Serial.printf("Reading file: %s\r\n", path);

    File file = fs.open(path);
    if(!file || file.isDirectory()){
        Serial.println("- failed to open file for reading");
        return;
    }

    Serial.println("- read from file:");
    int index = 0;
    while(file.available() && index < sizeof(readString) - 1){
        readString[index++] = file.read();
    }
    readString[index] = '\0'; // Null-terminate the string

    Serial.print("After read function previous version is: ");
    Serial.println(readString);
    file.close();
}
void writeFile(fs::FS &fs, const char * path, const char * message){
    Serial.printf("Writing file: %s\r\n", path);

    File file = fs.open(path, FILE_WRITE);
    if(!file){
        Serial.println("- failed to open file for writing");
        return;
    }
    if(file.print(message)){
        Serial.println("- file written");
    } else {
        Serial.println("- write failed");
    }
    file.close();
}
void blink()
{
  digitalWrite(LED_BUILTIN, HIGH);  // turn the LED on (HIGH is the voltage level)
  delay(1000);                      // wait for a second
  digitalWrite(LED_BUILTIN, LOW);   // turn the LED off by making the voltage LOW
  delay(1000);                      // wait for a second
}

void setup() {

  Serial.begin(115200);
  // Serial.setDebugOutput(true);
  pinMode(LED_BUILTIN, OUTPUT);
  Serial.println("Start.............");

  if(SPIFFS.begin(FORMAT_SPIFFS_IF_FAILED))
  {
      Serial.println("SPIFFS Sucessfull"); 
    }
    else
    {
      Serial.println("SPIFFS Mount Failed");
        return;
    }

  Serial.print("Current Firmware Version going to install is ");
  Serial.println(firmwareVersionString);
  listDir(SPIFFS, "/", 0);
  readFile(SPIFFS, "/UpdateStats.txt");
}

void loop() {
  blink();
  t_httpUpdate_return ret;
    for (uint8_t t = 5; t > 0; t--) {
    Serial.printf("[SETUP] WAIT %d...\n", t);
    Serial.flush();
    delay(1000);
  }
  WiFi.mode(WIFI_STA);// wifi sation mode
  WiFiMulti.addAP("Alcodex", "Adx@2013");

  Serial.println("loop begin...............");
  // wait for WiFi connection
  if ((WiFiMulti.run() == WL_CONNECTED))
  {
    blink();
    Serial.println("wifi connected and updation...");
    WiFiClient client; //object of wificlient
    
          // Convert readString to String for comparison
          PrevVersion = String(readString);
          delay(20000);    
              if(PrevVersion != firmwareVersionString) 
              { 
               Serial.print("Previous version is: "); 
               Serial.println(PrevVersion); 
               Serial.print("Current Firmware version is: ");
               Serial.println(firmwareVersionString); 
                                         //comparing versions
                                         
              writeFile(SPIFFS, "/UpdateStats.txt", firmwareVersionString.c_str());
              Serial.println(" After first write...............");
              ret = httpUpdate.update(client, "http://68.183.86.143:2001/ota/getdata");     // actual firmware flashing

              
              }
              else
              {
               Serial.println("Same Version");  
              }

              blink();
                    switch (ret) 
                    {
                      case HTTP_UPDATE_FAILED:
                        Serial.printf("HTTP_UPDATE_FAILED Error (%d): %s", httpUpdate.getLastError(), httpUpdate.getLastErrorString().c_str());
                        break;

                      case HTTP_UPDATE_NO_UPDATES:
                        Serial.println("HTTP_UPDATE_NO_UPDATES");
                        break;

                      case HTTP_UPDATE_OK:                     // http return value  all okay,
                        Serial.println("HTTP_UPDATE_OK");
                       

                        break;
                    }
        
  }
  
}
